version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.13.7-management
    container_name: news_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: news_user
      RABBITMQ_DEFAULT_PASS: news_password
    volumes:
      - news_rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  app_db:
    image: mongo:7.0.20-jammy
    container_name: news_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: news_user
      MONGO_INITDB_ROOT_PASSWORD: db_pass
    volumes:
      - app_db_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  scrapper:
    build:
      context: ./NewsScrapper
      dockerfile: Dockerfile
    container_name: news_scrapper
    depends_on:
      app_db:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs/scrapper:/usr/src/app/logs
    environment:
      MONGO_HOST: app_db
      RABBITMQ_HOST: rabbitmq
      LOGSTASH_HOST: logstash
      PORT: 3000
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', res => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

# generated audio quality is not good, so we are not using this service
# we are using the NewsAppTTS Node Android app
# newsttspython:
#   build:
#     context: ./NewsTTSPython
#     dockerfile: Dockerfile
#   depends_on:
#     rabbitmq:
#       condition: service_healthy
#   environment:
#     RABBITMQ_HOST: rabbitmq
#   restart: unless-stopped

  newsvideogenerator:
    build:
      context: ./NewsVideoGenerator
      dockerfile: Dockerfile
    container_name: news_video_generator
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs/newsvideogenerator:/usr/src/app/logs
    environment:
      RABBITMQ_HOST: rabbitmq
      LOGSTASH_HOST: logstash
    restart: unless-stopped

  youtube:
    build:
      context: ./YoutubeService
      dockerfile: Dockerfile
    container_name: news_youtube
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./generated_videos:/videos
      - ./logs/youtube:/usr/src/app/logs
    restart: unless-stopped
    environment:
      RABBITMQ_HOST: rabbitmq
      LOGSTASH_HOST: logstash

  elasticsearch:
    image: elasticsearch:8.14.1
    container_name: news_elasticsearch
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  logstash:
    image: logstash:8.14.1
    container_name: news_logstash
    volumes:
      - ./ELK/logstash:/usr/share/logstash/pipeline
      - ./logs:/var/log/app_logs
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  kibana:
    image: kibana:8.14.1
    container_name: news_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

volumes:
  news_rabbitmq_data:
  app_db_data:
  elasticsearch_data:
